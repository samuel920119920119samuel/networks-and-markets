import copy
from matching_market import market_eq, get_payment

def vcg(n, m, value):
    _, M = market_eq(n, m, value)
    vcg_price = [0] * m
    # sv
    sv = 0
    for player, item in enumerate(M):
        if item == -1: continue
        sv += value[player][item]
    # ignore each player
    for player, item in enumerate(M):
        if item == -1: continue
        # externailiy with player present = sv - player value
        ext_with = sv - value[player][item]
        # externailiy without player present
        val = copy.deepcopy(value)
        val.pop(player)
        ext_without = 0
        _, matching = market_eq(n-1, m, val)
        for p, i in enumerate(matching):
            ext_without += val[p][i]
        # item price = player externailiy = ext_without - ext_with
        vcg_price[item] = ext_without - ext_with
    payment = get_payment(M, vcg_price)
    return payment, M

if __name__ == "__main__":
    # Q8(c), figure 8.3 test
    """
    n = 3
    m = 3
    values = [[4, 12, 5], [7, 10, 9], [7, 7, 10]]
    p, M = vcg(n, m, values)
    print("VCG mechanism (p,M)")
    print("p:", p)
    print("M:", M)
    """
    # Q8(c), three self-generated test cases
    # test case 1
    """
    n = 5
    m = 5
    values = [[1, 6, 5, 9, 2],
              [5, 8, 7, 6, 3],
              [9, 4, 3, 7, 8],
              [9, 4, 6, 8, 7],
              [3, 9, 6, 1, 2]]
    p, M = vcg(n, m, values)
    print("VCG mechanism (p,M)")
    print("p:", p)
    print("M:", M)
    """
    # test case 2
    """
    n = 8
    m = 8
    values = [[4, 6, 14, 8, 12, 9, 10, 11],
              [7, 13, 14, 8, 11, 9, 10, 4],
              [10, 5, 2, 1, 7, 6, 9, 4],
              [8, 11, 5, 9, 12, 1, 10, 3],
              [1, 13, 6, 11, 12, 7, 14, 5],
              [1, 10, 13, 11, 4, 9, 6, 8],
              [4, 6, 10, 12, 11, 1, 9, 13],
              [8, 13, 2, 14, 6, 12, 1, 5]]
    p, M = vcg(n, m, values)
    print("VCG mechanism (p,M)")
    print("p:", p)
    print("M:", M)
    """
    # test case 3
    """
    n = 10
    m = 10
    values = [[9, 3, 5, 1, 5, 6, 3, 5, 1, 6],
              [5, 9, 7, 9, 5, 3, 3, 5, 8, 1],
              [3, 6, 6, 8, 6, 3, 7, 6, 1, 8],
              [3, 8, 7, 3, 8, 2, 2, 4, 6, 3],
              [1, 6, 9, 5, 9, 3, 6, 6, 3, 7],
              [9, 4, 8, 5, 4, 5, 2, 9, 6, 2],
              [1, 1, 4, 5, 2, 5, 2, 7, 3, 1],
              [8, 4, 7, 8, 1, 6, 4, 3, 1, 3],
              [2, 6, 6, 8, 8, 9, 8, 7, 2, 4],
              [8, 5, 1, 9, 5, 6, 8, 8, 1, 5]]
    p, M = vcg(n, m, values)
    print("VCG mechanism (p,M)")
    print("p:", p)
    print("M:", M)
    """
    # Q9
    """
    n = 20
    m = 20
    values = [[8, 16, 114, 24, 185, 42, 98, 80, 216, 410, 198, 144, 52, 658, 90, 608, 374, 36, 342, 60], [18, 74, 39, 76, 25, 12, 28, 368, 396, 20, 11, 552, 377, 14, 210, 112, 442, 666, 950, 840], [16, 20, 135, 200, 215, 144, 70, 208, 63, 470, 473, 36, 26, 28, 180, 288, 459, 324, 608, 400], [27, 16, 21, 144, 75, 18, 119, 168, 288, 300, 286, 24, 234, 518, 510, 480, 816, 738, 19, 280], [29, 78, 141, 16, 10, 12, 315, 32, 198, 420, 44, 372, 624, 490, 555, 416, 340, 360, 190, 300], [41, 44, 60, 44, 105, 186, 119, 392, 27, 360, 154, 360, 416, 504, 585, 512, 289, 684, 589, 320], [15, 92, 141, 24, 65, 198, 133, 384, 108, 220, 297, 576, 624, 42, 585, 368, 697, 108, 589, 860], [45, 100, 87, 8, 170, 198, 301, 304, 360, 400, 319, 180, 546, 448, 660, 80, 85, 342, 19, 440], [13, 40, 48, 28, 100, 210, 308, 312, 27, 190, 374, 408, 325, 154, 225, 64, 646, 126, 399, 260], [19, 70, 27, 48, 30, 282, 21, 80, 162, 380, 495, 120, 390, 126, 720, 528, 425, 180, 380, 460], [48, 18, 150, 140, 55, 96, 112, 32, 45, 330, 154, 24, 611, 574, 615, 608, 527, 720, 608, 240], [13, 100, 111, 80, 230, 96, 91, 264, 279, 400, 132, 384, 442, 574, 150, 576, 187, 738, 342, 420], [13, 48, 60, 88, 75, 84, 28, 376, 342, 470, 407, 204, 104, 574, 345, 384, 34, 648, 266, 920], [23, 52, 75, 200, 235, 258, 28, 224, 54, 390, 154, 528, 195, 252, 435, 688, 289, 378, 114, 640], [5, 38, 39, 96, 145, 114, 14, 96, 252, 230, 143, 312, 351, 196, 525, 32, 170, 342, 817, 680], [6, 56, 135, 120, 120, 54, 252, 264, 171, 430, 11, 540, 338, 154, 405, 496, 629, 72, 779, 20], [39, 22, 114, 108, 35, 252, 168, 336, 171, 190, 275, 540, 52, 476, 675, 464, 408, 792, 475, 620], [48, 40, 60, 128, 135, 180, 196, 128, 90, 450, 462, 564, 468, 560, 495, 560, 34, 720, 171, 580], [31, 46, 111, 24, 30, 270, 161, 392, 234, 390, 308, 156, 299, 406, 465, 448, 680, 162, 152, 760], [14, 54, 120, 76, 225, 30, 7, 232, 297, 500, 110, 336, 585, 336, 285, 528, 697, 720, 456, 840]]
    p, M = vcg(n, m, values)
    print("VCG mechanism (p,M)")
    print("p:", p)
    print("M:", M)
    """